// Minimal bundled JavaScript for critical functionality
// This combines csrf-handler, toast, mobile-menu, and essential index.js functions

// CSRF Handler
(function() {
    'use strict';
    
    window.csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
    
    // Add CSRF to all AJAX requests
    const originalFetch = window.fetch;
    window.fetch = function(url, options = {}) {
        if (!options.headers) options.headers = {};
        if (window.csrfToken) {
            options.headers['X-CSRFToken'] = window.csrfToken;
        }
        return originalFetch(url, options);
    };
})();

// Toast Notifications
function showToast(message, type = 'success', duration = 3000) {
    const toastStack = document.getElementById('flashStack') || createToastStack();
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <button class="flash_message_close" aria-label="Close" onclick="this.parentElement.remove()">
            <i class="fas fa-times"></i>
        </button>
        ${message}
    `;
    toastStack.appendChild(toast);
    setTimeout(() => toast.remove(), duration);
}

function createToastStack() {
    const stack = document.createElement('div');
    stack.className = 'toast-stack';
    stack.id = 'flashStack';
    document.body.appendChild(stack);
    return stack;
}

// Mobile Menu
document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    
    if (mobileMenuBtn && mobileMenu) {
        mobileMenuBtn.addEventListener('click', () => {
            mobileMenu.classList.toggle('active');
        });
    }
});

// Essential Cart & Wishlist Functions
let cart = {};
let wishlist = [];

// Load cart and wishlist from localStorage
function loadFromStorage() {
    try {
        cart = JSON.parse(localStorage.getItem('cart')) || {};
        wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
        updateCartCount();
        updateWishlistCount();
    } catch (e) {
        console.error('Error loading from storage:', e);
    }
}

// Update cart count
function updateCartCount() {
    const count = Object.values(cart).reduce((sum, item) => sum + (item.quantity || 0), 0);
    const badge = document.getElementById('cartCount');
    if (badge) badge.textContent = count;
}

// Update wishlist count
function updateWishlistCount() {
    const badge = document.getElementById('wishlistCount');
    if (badge) badge.textContent = wishlist.length;
}

// Add to cart (minimal version)
window.addToCart = function(productId, variantId, quantity = 1) {
    const key = variantId || productId;
    if (!cart[key]) {
        cart[key] = { productId, variantId, quantity: 0 };
    }
    cart[key].quantity += quantity;
    
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCount();
    showToast('Added to cart!', 'success');
    
    // Sync with backend
    fetch('/api/cart/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ product_id: productId, variant_id: variantId, quantity })
    }).catch(console.error);
};

// Toggle wishlist
window.toggleWishlist = function(productId) {
    const index = wishlist.indexOf(productId);
    if (index === -1) {
        wishlist.push(productId);
        showToast('Added to wishlist!', 'success');
    } else {
        wishlist.splice(index, 1);
        showToast('Removed from wishlist', 'info');
    }
    
    localStorage.setItem('wishlist', JSON.stringify(wishlist));
    updateWishlistCount();
    
    // Sync with backend
    fetch('/api/wishlist/toggle', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ product_id: productId })
    }).catch(console.error);
};

// Product image navigation
window.navigateProductCardImage = function(productId, direction) {
    const container = document.querySelector(`.product-card-slideshow[data-product-id="${productId}"]`);
    if (!container) return;
    
    const slides = container.querySelectorAll('.product-slide');
    const current = container.querySelector('.product-slide.active');
    const currentIndex = Array.from(slides).indexOf(current);
    
    let nextIndex = currentIndex + direction;
    if (nextIndex < 0) nextIndex = slides.length - 1;
    if (nextIndex >= slides.length) nextIndex = 0;
    
    slides[currentIndex].classList.remove('active');
    slides[nextIndex].classList.add('active');
    
    const counter = container.querySelector('.current-image');
    if (counter) counter.textContent = nextIndex + 1;
};

// Quick view modal
window.openQuickView = async function(productId) {
    try {
        const response = await fetch(`/api/product/${productId}`);
        const product = await response.json();
        
        // Create and show modal
        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.innerHTML = `
            <div class="modal-content">
                <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">Ã—</button>
                <h2>${product.name}</h2>
                <p>${product.description || ''}</p>
                <div class="price">$${product.price}</div>
                <button class="btn btn-primary" onclick="addToCart(${product.id}, null, 1)">Add to Cart</button>
            </div>
        `;
        document.body.appendChild(modal);
    } catch (e) {
        console.error('Error loading product:', e);
        showToast('Error loading product', 'error');
    }
};

// Handle image errors
window.handleImageError = function(img) {
    img.onerror = null;
    img.src = '/static/IMG/placeholder.svg';
};

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    loadFromStorage();
    
    // Add event listeners for cart buttons
    document.querySelectorAll('.btn-add-cart').forEach(btn => {
        btn.addEventListener('click', function() {
            const productId = this.dataset.productId;
            const variantId = this.dataset.variantId;
            addToCart(productId, variantId, 1);
        });
    });
    
    // Add event listeners for wishlist buttons
    document.querySelectorAll('.btn-wishlist').forEach(btn => {
        btn.addEventListener('click', function() {
            const productId = this.dataset.productId;
            toggleWishlist(productId);
        });
    });
    
    // Lazy load images with Intersection Observer
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.removeAttribute('data-src');
                        imageObserver.unobserve(img);
                    }
                }
            });
        });
        
        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }
});

// Export for other scripts
window.showToast = showToast;
window.updateCartCount = updateCartCount;
window.updateWishlistCount = updateWishlistCount;